# Use a dedicated builder that supports cross-compilation
FROM --platform=linux/amd64 golang:1.24-bullseye AS builder

# Create app directory
WORKDIR /build

# Install build dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    libc6-dev \
    pkg-config \
    sqlite3 \
    libsqlite3-dev \
    && rm -rf /var/lib/apt/lists/*

# Copy Go module files first for better caching
COPY go.mod go.sum ./
RUN go mod download && go mod verify

# Copy the rest of the source code
COPY . .

# Build with CGO enabled and debug the binary
RUN CGO_ENABLED=1 go build -v -o ogdrip-backend . && \
    file ogdrip-backend && \
    ls -la ogdrip-backend && \
    ./ogdrip-backend -h || echo "Expected error in builder - this is just for validation"

# Use a Debian-based image for runtime
FROM --platform=linux/amd64 debian:bullseye-slim

# Set working directory
WORKDIR /app

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    ca-certificates \
    chromium \
    libsqlite3-0 \
    file \
    dumb-init \
    && rm -rf /var/lib/apt/lists/*

# Copy the binary from the builder stage
COPY --from=builder /build/ogdrip-backend ./

# Verify the binary exists and is executable
RUN ls -la ogdrip-backend && \
    chmod +x ogdrip-backend && \
    file ogdrip-backend

# Create output directory
RUN mkdir -p /app/outputs

# Environment variables
ENV PORT=8888
ENV BASE_URL=http://localhost:8888
ENV CHROME_PATH=/usr/bin/chromium
ENV OUTPUT_DIR=/app/outputs
# Add Chromium flags for containerized environment
ENV CHROME_FLAGS="--no-sandbox,--disable-dev-shm-usage,--disable-gpu,--headless,--disable-software-rasterizer"

# Use dumb-init to handle signals properly
ENTRYPOINT ["/usr/bin/dumb-init", "--"]

# Command to run the application with -service flag
CMD ["./ogdrip-backend", "-service"]
